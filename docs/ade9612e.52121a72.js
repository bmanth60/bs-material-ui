(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),i=t(6),a=(t(0),t(85)),o={title:"Union Values"},l={unversionedId:"project-structure/union-values",id:"project-structure/union-values",isDocsHomePage:!1,title:"Union Values",description:"Union differences",source:"@site/docs/project-structure/union-values.md",permalink:"/bs-material-ui/docs/project-structure/union-values",sidebar:"docs",previous:{title:"Modules",permalink:"/bs-material-ui/docs/project-structure/modules"},next:{title:"Any Type",permalink:"/bs-material-ui/docs/project-structure/any-type"}},c=[{value:"Union differences",id:"union-differences",children:[]},{value:"String only unions",id:"string-only-unions",children:[{value:"Rules for string only unions",id:"rules-for-string-only-unions",children:[]},{value:"Additional types",id:"additional-types",children:[]}]},{value:"Numeric unions",id:"numeric-unions",children:[{value:"Rules for numeric unions",id:"rules-for-numeric-unions",children:[]}]},{value:"Mixed unions",id:"mixed-unions",children:[{value:"Rules for mixed unions",id:"rules-for-mixed-unions",children:[]}]}],s={rightToc:c};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"union-differences"},"Union differences"),Object(a.b)("p",null,"While is is great to have a consistent usage for passing union values as props,\nit can come at a conversion cost. This is why the current bindings make a\ndifference between 3 types of union values."),Object(a.b)("h2",{id:"string-only-unions"},"String only unions"),Object(a.b)("p",null,"Whenever a prop on a component consists of a selection of string only literals,\nthe generator will use the\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://reasonml.org/docs/reason-compiler/latest/function#constrain-arguments-better"}),"[@bs.string]"),"\n(will become obsolete with ReScript eventually) directive directly on the prop.\nThis will ensure a direct application of the string without conversion cost."),Object(a.b)("p",null,"String only unions therefore need to get passed as a polymorphic variant. This\nis an example of the prop ",Object(a.b)("inlineCode",{parentName:"p"},"variant"),", taken from ",Object(a.b)("inlineCode",{parentName:"p"},"MaterialUi_Accordion.re"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'~variant: option<[\n  | @bs.as("elevation") #Elevation\n  | @bs.as("outlined") #Outlined\n>=?,\n')),Object(a.b)("p",null,"You can use it like so:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"<MaterialUi_Accordion variant=#Outlined />\n")),Object(a.b)("h3",{id:"rules-for-string-only-unions"},"Rules for string only unions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Always ",Object(a.b)("inlineCode",{parentName:"li"},"[@bs.string]")," in the external (you may ignore this if you're on\n",Object(a.b)("inlineCode",{parentName:"li"},"ReScript"),")"),Object(a.b)("li",{parentName:"ul"},"Always ",Object(a.b)("strong",{parentName:"li"},"uppercased")," polymorphic variant of the original string value"),Object(a.b)("li",{parentName:"ul"},"Invalid chars (like spaces) will be replaced by ",Object(a.b)("inlineCode",{parentName:"li"},"_"))),Object(a.b)("h3",{id:"additional-types"},"Additional types"),Object(a.b)("p",null,"In case that you need to pass around the type of a string union prop, the\ngenerator creates a helper type for you in the module. To continue the example\nfrom earlier, the following helper type will be added to\n",Object(a.b)("inlineCode",{parentName:"p"},"MaterialUi_Accordion.re"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"type variant = [ | #Elevation | #Outlined];\n")),Object(a.b)("h2",{id:"numeric-unions"},"Numeric unions"),Object(a.b)("p",null,"Similar to the string only unions, a union consisting of only numbers will\nutilize the\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://reasonml.org/docs/reason-compiler/latest/function#constrain-arguments-better"}),"[@bs.int]"),"\ndirective. Therefore, numerical unions will accept a form of polymorphic variant\nas well."),Object(a.b)("p",null,"These don't happen often - currently the only place where this applies is in the\n",Object(a.b)("inlineCode",{parentName:"p"},"MaterialUi_Grid.re")," component."),Object(a.b)("p",null,"Example usage:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"<MaterialUi_Grid spacing=#V2 />\n")),Object(a.b)("h3",{id:"rules-for-numeric-unions"},"Rules for numeric unions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Always ",Object(a.b)("inlineCode",{parentName:"li"},"@bs.string")," in the external (you may ignore this if you're on\n",Object(a.b)("inlineCode",{parentName:"li"},"ReScript"),")"),Object(a.b)("li",{parentName:"ul"},"Always ",Object(a.b)("inlineCode",{parentName:"li"},"#V[NUM]")," format")),Object(a.b)("h2",{id:"mixed-unions"},"Mixed unions"),Object(a.b)("p",null,"Mixed unions make use of one of the newer features that bucklescript offers:\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://reasonml.org/blog/union-types-in-bucklescript"}),"[unboxed]"),". The nice\nthing about unboxed is, that there is no conversion cost, just as with the above\nones. Some of the helper functions will leave a function in the generated js,\nthat just returns the one argument it gets passed. These can be stripped easily\nwith an optimization build step (e.g. with webpack)."),Object(a.b)("p",null,"Whenever a prop value can be a literal of multiple types, this way of typing it\nis used. A module inside of the component is created, that is simply named after\nthe prop (",Object(a.b)("strong",{parentName:"p"},"uppercased"),")."),Object(a.b)("p",null,"Let's use the ",Object(a.b)("inlineCode",{parentName:"p"},"component")," prop of the ",Object(a.b)("inlineCode",{parentName:"p"},"Grid")," component as an example. We can\npass either a string, callback or element as the ",Object(a.b)("inlineCode",{parentName:"p"},"component")," prop. This will\ngenerate the following module inside the ",Object(a.b)("inlineCode",{parentName:"p"},"Grid")," component file:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),"module Component: {\n  type t;\n  let string: string => t;\n  let callback: (unit => React.element) => t;\n  let element: React.element => t;\n} = {\n  @unboxed\n  type rec t =\n    | Any('a): t;\n  let string = (v: string) => Any(v);\n  let callback = (v: unit => React.element) => Any(v);\n  let element = (v: React.element) => Any(v);\n};\n")),Object(a.b)("p",null,"You can use it in the following way:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-reason"}),'open MaterialUi;\n<div>\n  <Grid component=Grid.Component.string("div") />\n  <Grid component=Grid.Component.element(<div />) />\n</div>\n')),Object(a.b)("h3",{id:"rules-for-mixed-unions"},"Rules for mixed unions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Always creates a module leveraging ",Object(a.b)("inlineCode",{parentName:"li"},"@unboxed")," with the uppercased name of the\nprop"),Object(a.b)("li",{parentName:"ul"},"Always fills that module with helper functions that are named after the type\nthey represent"),Object(a.b)("li",{parentName:"ul"},"Literal values don't have helper functions, but are represented as let\nbindings"),Object(a.b)("li",{parentName:"ul"},"Numeric literals are always prefixed with ",Object(a.b)("inlineCode",{parentName:"li"},"_")," (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"Grid.Md._2"),")"),Object(a.b)("li",{parentName:"ul"},"Boolean literals are always prefixed with ",Object(a.b)("inlineCode",{parentName:"li"},"_")," (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"Grid.Md._false"),")"),Object(a.b)("li",{parentName:"ul"},"String literals are always their lowercased self (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"Grid.Md.auto"),")")))}u.isMDXComponent=!0},85:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),u=function(e){var n=i.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return i.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,m=p["".concat(o,".").concat(d)]||p[d]||b[d]||a;return t?i.a.createElement(m,l(l({ref:n},s),{},{components:t})):i.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);